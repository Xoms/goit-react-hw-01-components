{"version":3,"sources":["components/social-profile/SocialProfile.jsx","components/statistics/Statistics.jsx","components/friend-list/FrienList.jsx","components/transactions/TransactRecord/index.js","components/transactions/TransactRecord/TransactRecord.jsx","components/transactions/Transactions.js","App.js","reportWebVitals.js","index.js"],"names":["SocialProfile","props","className","src","process","imgSrc","alt","name","width","height","tag","location","activity","followers","views","likes","defaultProps","tgLink","tgLinkCaption","Statistics","title","stats","length","mockObj","Date","now","Math","random","push","outputData","map","el","label","percentage","id","FriendList","markup","friends","isOnline","avatar","TransactRecord","type","amount","currency","Transactions","transactions","rest","activityObj","App","statistic","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93361a63.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'; \r\nimport './SocialProfile.scss';\r\n\r\nexport default function SocialProfile (props){\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={process.env.PUBLIC_URL + props.imgSrc} alt={props.name} className=\"card__photo\" width=\"128\" height=\"128\"/>\r\n            <div className=\"card__meta\">\r\n                <h3 className=\"card__name\">{props.name}</h3>\r\n                <p className=\"card__tag\">@{props.tag}</p>\r\n                <p className=\"card__location\">{props.location}</p>\r\n\r\n                <ul className=\"card__info-list info-list\">\r\n                <li className=\"info-list__item\">\r\n                    <p className=\"info-list__item-placeholder\">Followers</p>\r\n                    <p className=\"info-list__item-value\">{props.activity.followers}</p>\r\n                </li>\r\n                <li className=\"info-list__item\">\r\n                    <p className=\"info-list__item-placeholder\">Views</p>\r\n                    <p className=\"info-list__item-value\">{props.activity.views}</p>\r\n                </li>\r\n                <li className=\"info-list__item\">\r\n                    <p className=\"info-list__item-placeholder\">Likes</p>\r\n                    <p className=\"info-list__item-value\">{props.activity.likes}</p>\r\n                </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nSocialProfile.propTypes = {\r\n    imgSrc: PropTypes.string,\r\n    name: PropTypes.string.isRequired,\r\n    tag: PropTypes.string,\r\n    location: PropTypes.string,\r\n    activity:PropTypes.shape({\r\n        followers: PropTypes.number,\r\n        views: PropTypes.number,\r\n        likes: PropTypes.number,\r\n    })\r\n    \r\n}\r\n\r\nSocialProfile.defaultProps = {\r\n    imgSrc: './img/no-profile-img.png',\r\n    tgLink: '#',\r\n    tgLinkCaption: 'no-link',\r\n    location: 'Location unknown',\r\n    activity: {\r\n        followers: 0,\r\n        views: 0,\r\n        likes: 0\r\n      }\r\n  };","import React from 'react';\r\nimport PropTypes from 'prop-types'; \r\nimport './Statistics.scss';\r\n\r\nexport default function Statistics({title, stats}){\r\n\r\n    if (stats.length%4) {  //check for 4 in row\r\n        while(stats.length%4){\r\n            let mockObj = {\r\n                \"id\": Date.now() + Math.random() + '', \r\n                \"label\": \"\", \r\n                \"percentage\": 0\r\n            }\r\n            stats.push(mockObj)\r\n        }\r\n    }\r\n\r\n    const outputData = stats.map(el => {\r\n            return ( \r\n            <li className=\"stat-list__item\" key={el.id}>\r\n                <span className=\"stat-list__item-label\">{el.label}</span>\r\n                {el.percentage !== 0 && <span className=\"stat-list__item-percentage\"> {el.percentage}%</span>}\r\n            </li>\r\n            )\r\n        }); \r\n\r\n\r\n    return (\r\n        <section className=\"statistics\">\r\n        {!!title && <h2 className=\"statistics__title\">{title}</h2>} {/*Это чтоб не рендерился h1 совсем, если ничего не передано*/ }\r\n\r\n        <ul className=\"stat-list\">\r\n            {outputData}\r\n        </ul>\r\n        </section>\r\n    )\r\n}\r\n\r\nStatistics.propTypes = {\r\n    title: PropTypes.string,\r\n    stats: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.string,\r\n        label: PropTypes.string,\r\n        percentage: PropTypes.number,\r\n    })).isRequired    \r\n}\r\n\r\nStatistics.defaultProps = {\r\n    title: ''\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types'; \r\nimport './Friend-list.scss';\r\n\r\nexport default function FriendList({friends}){\r\n\r\n    const markup = friends.map(el => \r\n        <li className=\"friend-list__item\" key={el.id}>\r\n            {\r\n            el.isOnline ? <span className=\"friend-list__status friend-list__status--active\"></span> :\r\n                <span className=\"friend-list__status\"></span>\r\n            }\r\n            <img className=\"friend-list__avatar\" src={process.env.PUBLIC_URL + el.avatar} alt={el.name} width=\"48\" />\r\n            <p className=\"friend-list__name\">{el.name}</p>\r\n        </li>    \r\n        );\r\n\r\n    return (\r\n        <ul className=\"friend-list\">\r\n            {markup}\r\n        </ul>\r\n    )\r\n}\r\n\r\nFriendList.propTypes = {\r\n    friends: PropTypes.arrayOf(PropTypes.shape({\r\n        \"avatar\": PropTypes.string,\r\n        \"name\": PropTypes.string,\r\n        \"isOnline\": PropTypes.bool,\r\n        \"id\": PropTypes.number\r\n    })).isRequired\r\n};","import TransactRecord from './TransactRecord';\n\nexport default TransactRecord;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst TransactRecord = ({id, type, amount, currency}) => (\n  <tr key={id}>\n      <td>{type}</td>\n      <td>{amount}</td>\n      <td>{currency}</td>\n  </tr>\n);\n\nTransactRecord.propTypes = {\n  id: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  amount:  PropTypes.string.isRequired,\n  currency: PropTypes.string.isRequired,\n};\n\nexport default TransactRecord;\n","import React from 'react';\r\nimport PropTypes from 'prop-types'; \r\nimport TransactRecord from './TransactRecord';\r\nimport './Transactions.scss';\r\n\r\n\r\n\r\nexport default function Transactions({transactions}){\r\n    const markup = transactions.map(el => {\r\n            const {id, ...rest } = el;\r\n\r\n            return  <TransactRecord key={id} {...rest} />\r\n        })\r\n\r\n    return (\r\n        <div className=\"transactions-wrapper\">\r\n            <table className=\"transaction-history\">\r\n                <thead>\r\n                    <tr>\r\n                    <th>Type</th>\r\n                    <th>Amount</th>\r\n                    <th>Currency</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {markup}                \r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\nTransactions.propTypes = {\r\n    transactions: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.string,\r\n        type: PropTypes.string,\r\n        amount: PropTypes.string,\r\n        currency: PropTypes.string\r\n    })).isRequired    \r\n}","import SocialProfile from './components/social-profile';\r\nimport Statistics from './components/statistics'\r\nimport FriendList from './components/friend-list';\r\nimport Transactions from './components/transactions';\r\n\r\nimport friends from './mockData/friends.json';\r\nimport statistic from './mockData/statistical-data.json';\r\nimport transactions from './mockData/transactions.json';\r\nimport './App.scss';\r\n\r\n//Mock data for 1-st task\r\nconst activityObj = {\r\n  followers: 198,\r\n  views: 3685,\r\n  likes: 492\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>Task 1. Social profile</h2>\r\n      <SocialProfile\r\n        imgSrc = \"/img/TimothyGrant.jpg\" \r\n        name=\"Timothy Grant\"\r\n        tag =\"tgrant\"\r\n        location=\"Sao Paulo, Brasil\"\r\n        activity = {activityObj} />\r\n      \r\n      <h2>Task 2. Statistics</h2>\r\n      <Statistics\r\n        title = \"Upload statistics\"\r\n        stats = {statistic}\r\n      />\r\n      <h2>Task 3. Friend-list</h2>\r\n      <FriendList friends={friends}/>\r\n      <h2>Task 4. Transactions</h2>\r\n      <Transactions transactions={transactions}/>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}